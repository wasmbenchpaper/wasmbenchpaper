FROM gcc:9 as build

ENV DEBIAN_FRONTEND=noninteractive

SHELL ["/bin/bash", "-c"]

WORKDIR /wrapper

# wasmedge dependencies
RUN apt-get update && apt-get install -y git clang lsb-release && apt-get clean all

RUN curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -e all -v 0.11.2 && \
    echo 'source $HOME/.wasmedge/env' >> ~/.bashrc && source ~/.bashrc

# go
RUN wget https://go.dev/dl/go1.20.1.linux-amd64.tar.gz &&  rm -rf /usr/local/go && tar -C /usr/local -xzf go1.20.1.linux-amd64.tar.gz

# go tinygo
RUN wget https://github.com/tinygo-org/tinygo/releases/download/v0.27.0/tinygo_0.27.0_amd64.deb && dpkg -i tinygo_0.27.0_amd64.deb

# rust
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

RUN ~/.cargo/bin/rustup target add wasm32-wasi


# CPP
ENV WASI_VERSION=19
ENV WASI_VERSION_FULL=${WASI_VERSION}.0
ENV WASI_SDK_PATH=/wrapper/t1/wasi-sdk-${WASI_VERSION_FULL}
ENV WASI_SDK_URL="https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz"

RUN mkdir -p t1/ && cd t1/ && wget "$WASI_SDK_URL" && tar -xzf "wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz"



# tinygo build
# RUN export PATH=$PATH:/usr/local/go/bin && tinygo build -o main.wasm -target wasi ./main.go




